name: Release

on:
  workflow_dispatch: {}   # run only when triggered manually

permissions:
  contents: write         # needed to create a release & upload assets

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build plugin ZIP
        run: ./gradlew --no-daemon clean buildPlugin

      - name: Read project version from Gradle
        id: vars
        shell: bash
        run: |
          # Try to get version from Gradle's properties output
          VER=$(./gradlew -q properties | awk -F': ' '/^version:/ {print $2; exit}')
          if [ -z "$VER" ] || [ "$VER" = "unspecified" ]; then
            echo "Gradle 'version' not found. If you keep plugin version elsewhere, either set project.version or add a task to print it."
            exit 1
          fi
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      - name: Find built ZIP
        id: zip
        shell: bash
        run: |
          FILE=$(ls -1 build/distributions/*.zip | head -n1)
          if [ ! -f "$FILE" ]; then
            echo "No plugin ZIP found in build/distributions"
            exit 1
          fi
          echo "path=$FILE" >> "$GITHUB_OUTPUT"
          echo "name=$(basename "$FILE")" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.vars.outputs.version }}
          name: CLion-MLIR-Plugin v${{ steps.vars.outputs.version }}
          draft: false
          prerelease: false
          files: ${{ steps.zip.outputs.path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}